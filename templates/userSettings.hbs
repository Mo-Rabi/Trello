<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>user settings</title>

        <!-- Include Cropper.js from a CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js" integrity="sha512-X/YkDZyjTf4wyc2Vy16YGCPHwAY8rZJY+POgokZjQB2mhIRFJCckEGc6YyX9eNsPfn0PzThEuNs+uaomE5CO6A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.0/cropper.min.js"></script>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.0/cropper.min.css">
    
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.1/css/bootstrap.min.css"
      integrity="sha512-Z/def5z5u2aR89OuzYcxmDJ0Bnd5V1cKqBEbvLOiUNWdg9PQeXVvXLI90SE4QOHGlfLqUnDNVAYyZi8UwUTmWQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
 <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #0079BF;
            margin: 0;
            padding: 0;
            color: #fff;
        }

        .container {
            display: flex;
            flex-wrap: wrap;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .card {
            background-color: #fff;
            border-radius: 5px;
            padding: 1px;
            margin: 1px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .card img {
            height: auto;
            margin-bottom: 10px;
        }

        h1 {
            font-size: 36px;
            margin-bottom: 20px;
        }

        .btn-container {
            display: block;
            flex-wrap: wrap;
            flex-basis: 90%;
            gap: 20px;
        }

        .btn {
            padding: 10px 20px;
            background-color: #55C3F2;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease;
            cursor: pointer;
            border: none;
            align-self: center;
        }

        .btn:hover {
            background-color: #0079BF;
        }

        #changePassword{
          background-color: orange;
          width: 50px;
          height: 50px;
        }
    </style>


</head>

<body>
     <a href="/profile">
     <img
        src="https://www.svgrepo.com/show/483220/home.svg"
        width="5%"
        style="position:fixed; padding:2%;"
      >
  </a>
    <div class="container">
    <div>
      <a href="/"><img
        src="https://upload.wikimedia.org/wikipedia/en/thumb/8/8c/Trello_logo.svg/1024px-Trello_logo.svg.png"
        width="50%" style="margin:5% 25%;"
        alt="logo"
      /></a>
    </div>
{{!--! 1.b Get Image back from DB --}}
<img src="" id="avatarImage" alt="">

{{!--! Crop photo before sending it to the DB --}}
  <div class="container-fluid w-50">

          <label onclick="start_cropping()"></label>
          <div id="display_image_div">
          </div>
          <input type="hidden" name="cropped_image_data" id="cropped_image_data">
          <br>
          <input type="file" name="photoBinary" id="browse_image" class="form-control">
        </div>
        <div class="row" align="center">
          <label>Preview</label>

  <form action="/uploadBinary" method="POST" enctype="multipart/form-data">
  <div id="cropped_image_result">
<img src="" style="width: 10%;" id="imageBufferSrc"/> 
  </div>
            <button type="button" class="btn btn-warning" id="upload_button" onclick="upload()">Upload</button>
            <button type="button" class="btn btn-success" id="crop_button">Crop</button>
          <button type="button" class="btn btn-danger" id="download_button" onclick="download()">Download</button>
</form>
  <br>  <br>  <br>
        

        </div>
  </form>
  <br><br><br>




  {{!--! Add Avatar Image --}}
  {{!-- <form action="/upload" method="POST" enctype="multipart/form-data">
    <input type="file" name="avatar" />
    <button type="submit">Upload</button>
  </form> --}}

{{!--! 1.A Add image dirctly to MongoDB using binary --}}
  {{!-- <form action="/uploadBinary" method="POST" enctype="multipart/form-data">
    <input type="file" name="photoBinary" />
    <button type="submit">Upload</button>
  </form> --}}



<div class="btn-container">
  {{!--! Change Password --}}
  <form id="update-password-form">
    <button class="btn" type="submit">Update Password</button>
    <input type="password" id="new-password" placeholder="Enter new password"
    pattern="^[A-Z][a-z]{3,8}$">
  </form> <br><br>


  {{!--! Update User --}}
  <form id="update-user-form">
    <button class="btn" type="submit">Update User</button>
    <input type="text" id="update-user-fName" placeholder="Enter new first name">
    <input type="text" id="update-user-lName" placeholder="Enter new last name">
  </form> <br><br>
  {{!--! Soft and hard delete --}}
    <button class="btn" id="deleteSoft">Delete User (Soft)</button><br><br>
    <button class="btn" id="deleteHard">Delete User (Hard)</button><br><br>
     <button class="btn" id="logout">Logout</button>
</div>
</div>



{{!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/js-cookie/2.0.4/js.cookie.min.js" integrity="sha512-Nonc2AqL1+VEN+97F3n4YxucBOAL5BgqNwEVc2uUjdKOWAmzwj5ChdJQvN2KldAxkCxE4OenuJ/RL18bWxGGzA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script> --}}

<script>
  {{!--! Send Cropped photo to DB without Multer Perfectly Working now--}} 
const upload = async()=>{
const imageElement = document.querySelector("#cropped_image_result img");
imgBufferBase64 = imageElement.src
console.log(imgBufferBase64);

const response = await fetch('/photoBufferWithoutMulter', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ image: imgBufferBase64 })

    });

}



{{!--! Crop the image --}}
  $("body").on("change", "#browse_image", function(e) {
    var files = e.target.files;
    var done = function(url) {
      $('#display_image_div').html(`<img name="display_image_data" id="display_image_data" src="${url}" alt="Uploaded Picture">`);

      var image = document.getElementById('display_image_data');
      var button = document.getElementById('crop_button');
      var result = document.getElementById('cropped_image_result');
      var croppable = false;
      var cropper;

      image.onload = function() {
        cropper = new Cropper(image, {
          aspectRatio: 1,
          viewMode: 1,
          ready: function() {
            croppable = true;
          },
        });
      };

      button.onclick = function() {
        var croppedCanvas;
        var roundedCanvas;
        var roundedImage;

        if (!croppable) {
          return;
        }

        // Crop
        croppedCanvas = cropper.getCroppedCanvas();

        // Round (define getRoundedCanvas function)
        roundedCanvas = getRoundedCanvas(croppedCanvas);

        // Show
        roundedImage = document.createElement('img');
        roundedImage.src = roundedCanvas.toDataURL();
        result.innerHTML = '';
        result.appendChild(roundedImage);
      };
    };

    if (files && files.length > 0) {
      file = files[0];
      if (URL) {
        done(URL.createObjectURL(file));
      } else if (FileReader) {
        reader = new FileReader();
        reader.onload = function(e) {
          done(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    }
  });

  function getRoundedCanvas(sourceCanvas) {
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    var width = sourceCanvas.width;
    var height = sourceCanvas.height;
    canvas.width = width;
    canvas.height = height;
    context.imageSmoothingEnabled = true;
    context.drawImage(sourceCanvas, 0, 0, width, height);
    context.globalCompositeOperation = 'destination-in';
    context.beginPath();
    context.arc(width / 2, height / 2, Math.min(width, height) / 2, 0, 2 * Math.PI, true);
    context.fill();
    return canvas;
  }

{{!--! Download the cropped image --}}
function download() {
    var linkSource = $('#cropped_image_result img').attr('src');
    var fileName = 'download.png';
    const downloadLink = document.createElement("a");
    downloadLink.href = linkSource;
    downloadLink.download = fileName;
    downloadLink.click();
}



{{!-- ! Crop image before sending to DB
{{!--? 1. Initialize Cropper --}}
{{!-- document.getElementById('imageInput').addEventListener('change', function () {
  const image = document.getElementById('croppedImage');
  const cropper = new Cropper(image, {
    aspectRatio: 1,   // Set the desired aspect ratio for cropping
    viewMode: 1,   // Restrict the crop box to not exceed the container


    // You can configure other Cropper options here

  });
}); --}}
{{!--? 2.  Crop the image --}}

{{!-- document.getElementById('cropButton').addEventListener('click', function () {
  const cropper = document.getElementById('croppedImage').cropper;
  const croppedData = cropper.getCroppedCanvas().toDataURL(); // Get cropped image data as a data URL

  // Now you can send `croppedData` to the server to save it to the database
  // Example: Use fetch() to send the data to your server endpoint
}); --}}




{{!--! 1.B Retrieve image from DB --}}
async function fetchAvatar() {
  try {
    const response = await fetch('/getImage',{
      method:"GET",
    });

    if (!response.ok) {
      console.error('Avatar not found');
      return;
    }

// Assuming binaryData is your binary image data
let binaryData = await(response.arrayBuffer())
//console.log(`Binary Data ${binaryData}`);

let base64String = btoa(String.fromCharCode(...new Uint8Array(binaryData)));

let imgBase64 = base64String.replace('dataimage/pngbase64', ''); //removing the faulty beginning (to be refined later)
let imgBase64Sliced = imgBase64.slice(0, -1) //removing the extra = sign at the end of the photo

var src = 'data:image/jpeg;base64,' + imgBase64Sliced; //adding the correct prefix that was faultied along the way (to be refined with the above line)
const avatarImage = document.getElementById('avatarImage');
avatarImage.src = src

res.status(200)

  } catch (error) {

    console.log(`Error: ${error}`);
  }
}

fetchAvatar()


{{!--! Remove cookie when clicking Logout button --}}
let logoutBtn = document.getElementById("logout");
logoutBtn.addEventListener("click", async () => {

    const response = await fetch('/logout', {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
    });

    if (response.ok) {
      alert('You have been logged out from your account successfully');
      window.location.href="/"
    } else {
      alert('An error occurred while logging out');
    }
})

{{!-- !Change Password when clicking change Password (check that token exists "User is logged in") --}}
const form = document.getElementById('update-password-form');
const newPasswordInput = document.getElementById('new-password');

  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    const newPassword = newPasswordInput.value;

    const response = await fetch('/changePassword', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({newPassword}),
    });

    if (response.ok) {
      alert('Password updated successfully');
    } else {
      alert('An error occurred while updating the password');
    }
  });

{{!--! Update User details when clicking Update User --}}
const userForm = document.getElementById('update-user-form');
const newfNameInput = document.getElementById('update-user-fName');
const newlNameInput = document.getElementById('update-user-lName');
  userForm.addEventListener('submit', async (event) => {

    event.preventDefault();

    const newFName = newfNameInput.value;
    const newLName = newlNameInput.value;

    const response = await fetch('/updateUser', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({newFName, newLName}),
    });

    if (response.ok) {
      alert('User details were updated successfully');
    } else {
      alert('An error occurred while updating the user details');
    }
  });





{{!--! Delete User (Soft) when clicking Update User --}}
  softDeleteBtn = document.getElementById("deleteSoft")
softDeleteBtn.addEventListener("click",async ()=>{
  const response = await fetch('/softDelete', {
      method: 'DELETE',
    });

    if (response.ok) {
      alert('You account has been deleted, you can still recover your account within 30 days by logging in');
      window.location.href="/"
    } else {
      alert('An error occurred while deleting your account');
    }
})

{{!--! Delete User (Hard) when clicking Update User --}}
hardDeleteBtn = document.getElementById("deleteHard")
hardDeleteBtn.addEventListener("click",async ()=>{
  const response = await fetch('/hardDelete', {
      method: 'DELETE',
    });

    if (response.ok) {
      alert('You account has been PERMANENTLY deleted from our servers');
      window.location.href="/"
    } else {
      alert('An error occurred while deleting your account');
    }
})



</script>
</body>

</html>